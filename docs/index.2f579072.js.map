{"mappings":"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","sources":["<anon>","script.js","load-graph.js"],"sourcesContent":["// llmLoadGraph.js\n// Render an LLM provider load graph into a provided canvas context, using user-local time and day\nfunction $9be5ae1e49dd79b2$export$1b372903cd355918(canvas, options = {}) {\n    const ctx = canvas.getContext(\"2d\");\n    const width = canvas.width;\n    const height = canvas.height;\n    const now = new Date();\n    const currentHour = now.getHours();\n    const isWeekend = now.getDay() === 0 || now.getDay() === 6;\n    // Update the day type text\n    const dayTypeElement = document.getElementById('day-type');\n    if (dayTypeElement) dayTypeElement.textContent = `(${isWeekend ? 'weekend' : 'weekday'})`;\n    const providers = [\n        {\n            name: \"ChatGPT\",\n            color: \"#ff6384\",\n            weekdayPeaks: [\n                11,\n                17,\n                0\n            ],\n            weekendPeaks: [\n                13,\n                18\n            ],\n            weekendScale: 0.7 // Weekend peaks are 70% of weekday peaks\n        },\n        {\n            name: \"Claude\",\n            color: \"#36a2eb\",\n            weekdayPeaks: [\n                16,\n                20,\n                1\n            ],\n            weekendPeaks: [\n                17,\n                21\n            ],\n            weekendScale: 0.65 // Weekend peaks are 65% of weekday peaks\n        },\n        {\n            name: \"Grok\",\n            color: \"#cc65fe\",\n            weekdayPeaks: [\n                0,\n                18\n            ],\n            weekendPeaks: [\n                1,\n                19\n            ],\n            weekendScale: 0.75 // Weekend peaks are 75% of weekday peaks\n        },\n        {\n            name: \"Bing AI\",\n            color: \"#ffce56\",\n            weekdayPeaks: [\n                11,\n                17\n            ],\n            weekendPeaks: [\n                12,\n                18\n            ],\n            weekendScale: 0.7 // Weekend peaks are 70% of weekday peaks\n        }\n    ];\n    function generateCurve(peaks, weekendScale = 1) {\n        // Generate points at 5-minute intervals (193 points for 24 hours)\n        const numPoints = 193; // 24 hours * 12 points per hour + 1 for wrapping\n        const points = new Array(numPoints).fill(0);\n        for (const peak of peaks)for(let i = 0; i < numPoints; i++){\n            const hour = i / 12; // Convert point index to hour\n            const dist = Math.min(Math.abs(hour - peak), Math.abs(hour - peak + 24), Math.abs(hour - peak - 24));\n            // Tighter Gaussian falloff to maintain distinct peaks\n            const gaussian = Math.exp(-0.5 * (dist / 2.2) ** 2);\n            points[i] += gaussian;\n        }\n        // Normalize the values and apply weekend scaling if needed\n        const max = Math.max(...points);\n        return points.map((v)=>v / max * weekendScale);\n    }\n    const curves = providers.map((p)=>{\n        const peaks = isWeekend ? p.weekendPeaks : p.weekdayPeaks;\n        const scale = isWeekend ? p.weekendScale : 1;\n        return generateCurve(peaks, scale);\n    });\n    // Clear canvas\n    ctx.clearRect(0, 0, width, height);\n    // Background\n    ctx.fillStyle = \"#f9f9f9\";\n    ctx.fillRect(0, 0, width, height);\n    // Draw grid\n    ctx.strokeStyle = \"#e0e0e0\";\n    ctx.lineWidth = 1;\n    // Vertical grid lines (hours)\n    ctx.beginPath();\n    for(let i = 0; i <= 24; i += 2){\n        const x = i / 24 * width;\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n    }\n    // Horizontal grid lines\n    ctx.beginPath();\n    for(let i = 0; i <= 4; i++){\n        const y = i / 4 * height;\n        ctx.moveTo(0, y);\n        ctx.lineTo(width, y);\n    }\n    ctx.stroke();\n    // Draw x-axis labels (hours)\n    ctx.fillStyle = \"#666\";\n    ctx.font = \"12px sans-serif\";\n    ctx.textAlign = \"center\";\n    for(let i = 0; i <= 24; i += 4){\n        const x = i / 24 * width;\n        ctx.fillText(`${i}:00`, x, height - 5);\n    }\n    // Helper function to get point coordinates\n    function getPoint(i, value) {\n        return {\n            x: i / 192 * width,\n            y: height - value * height * 0.8 - 20\n        };\n    }\n    // Helper function to calculate slope between two points\n    function getSlope(p1, p2) {\n        return Math.abs((p2.y - p1.y) / (p2.x - p1.x));\n    }\n    // Helper function to get control points with dynamic tension\n    function getControlPoints(p0, p1, p2, p3) {\n        // Calculate slopes\n        const slope1 = getSlope(p0, p2);\n        const slope2 = getSlope(p1, p3);\n        // Adjust tension based on slope (more responsive to local changes)\n        const baseTension = 0.25;\n        const tension1 = baseTension / (1 + slope1 * 0.3);\n        const tension2 = baseTension / (1 + slope2 * 0.3);\n        const dx1 = p2.x - p0.x;\n        const dx2 = p3.x - p1.x;\n        // Calculate control points with refined tension adjustment\n        return {\n            cp1: {\n                x: p1.x + dx1 * tension1,\n                y: p1.y + (p2.y - p0.y) * tension1 * 0.4\n            },\n            cp2: {\n                x: p2.x - dx2 * tension2,\n                y: p2.y - (p3.y - p1.y) * tension2 * 0.4\n            }\n        };\n    }\n    // Draw curves with better styling\n    providers.forEach((provider, index)=>{\n        const curve = curves[index];\n        // Draw filled area under curve\n        ctx.fillStyle = `${provider.color}33`; // Add transparency\n        ctx.beginPath();\n        // Start at the bottom left\n        ctx.moveTo(0, height - 20);\n        // Draw the curve\n        for(let i = 0; i < curve.length; i++){\n            const p1 = getPoint(i, curve[i]);\n            if (i === 0) ctx.lineTo(p1.x, p1.y);\n            else {\n                const p0 = getPoint(Math.max(0, i - 2), curve[Math.max(0, i - 2)]);\n                const prevP = getPoint(i - 1, curve[i - 1]);\n                const nextP = getPoint(Math.min(curve.length - 1, i + 1), curve[Math.min(curve.length - 1, i + 1)]);\n                const { cp1: cp1, cp2: cp2 } = getControlPoints(p0, prevP, p1, nextP);\n                ctx.bezierCurveTo(cp1.x, cp1.y, cp2.x, cp2.y, p1.x, p1.y);\n            }\n        }\n        // Complete the filled area\n        ctx.lineTo(width, height - 20);\n        ctx.closePath();\n        ctx.fill();\n        // Draw curve line\n        ctx.strokeStyle = provider.color;\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        // Draw the curve\n        for(let i = 0; i < curve.length; i++){\n            const p1 = getPoint(i, curve[i]);\n            if (i === 0) ctx.moveTo(p1.x, p1.y);\n            else {\n                const p0 = getPoint(Math.max(0, i - 2), curve[Math.max(0, i - 2)]);\n                const prevP = getPoint(i - 1, curve[i - 1]);\n                const nextP = getPoint(Math.min(curve.length - 1, i + 1), curve[Math.min(curve.length - 1, i + 1)]);\n                const { cp1: cp1, cp2: cp2 } = getControlPoints(p0, prevP, p1, nextP);\n                ctx.bezierCurveTo(cp1.x, cp1.y, cp2.x, cp2.y, p1.x, p1.y);\n            }\n        }\n        ctx.stroke();\n    });\n    // Draw weekday peak reference line if it's a weekend\n    if (isWeekend) {\n        ctx.strokeStyle = \"#666\";\n        ctx.lineWidth = 1;\n        ctx.setLineDash([\n            5,\n            3\n        ]);\n        ctx.beginPath();\n        // Draw at the weekday peak level (where value would be 1.0)\n        const peakY = height - 1.0 * height * 0.8 - 20;\n        ctx.moveTo(0, peakY);\n        ctx.lineTo(width, peakY);\n        ctx.stroke();\n        // Add label\n        ctx.fillStyle = \"#666\";\n        ctx.font = \"12px sans-serif\";\n        ctx.textAlign = \"right\";\n        ctx.fillText(\"Weekday Peak\", width - 10, peakY - 5);\n        // Reset dash pattern\n        ctx.setLineDash([]);\n    }\n    // Draw current time indicator\n    const nowX = (currentHour + now.getMinutes() / 60) / 24 * width;\n    ctx.strokeStyle = \"#000\";\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.setLineDash([\n        5,\n        3\n    ]);\n    ctx.moveTo(nowX, 0);\n    ctx.lineTo(nowX, height - 20);\n    ctx.stroke();\n    ctx.setLineDash([]);\n    // Draw current time label\n    ctx.fillStyle = \"#000\";\n    ctx.font = \"bold 12px sans-serif\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(\"Now\", nowX, 15);\n    // Draw legend\n    const legendX = 15;\n    let legendY = 25;\n    ctx.textAlign = \"left\";\n    providers.forEach((p, i)=>{\n        ctx.fillStyle = p.color;\n        ctx.fillRect(legendX, legendY - 8, 15, 8);\n        ctx.fillStyle = \"#555\";\n        ctx.font = \"12px sans-serif\";\n        ctx.fillText(p.name, legendX + 20, legendY);\n        legendY += 20;\n    });\n} // Usage:\n // const canvas = document.getElementById(\"yourCanvasId\");\n // import { renderLLMLoadGraph } from \"./llmLoadGraph.js\";\n // renderLLMLoadGraph(canvas);\n\n\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    // Update times every second\n    $c1ce9d969bfa6909$var$updateTimes();\n    setInterval($c1ce9d969bfa6909$var$updateTimes, 1000);\n    // Initialize the LLM load graph\n    $c1ce9d969bfa6909$var$initializeLLMLoadGraph();\n});\nfunction $c1ce9d969bfa6909$var$initializeLLMLoadGraph() {\n    const canvas = document.getElementById('llm-load-graph');\n    if (canvas) {\n        // Initialize graph\n        (0, $9be5ae1e49dd79b2$export$1b372903cd355918)(canvas);\n        // Update graph every 5 minutes to reflect changing time\n        setInterval(()=>{\n            (0, $9be5ae1e49dd79b2$export$1b372903cd355918)(canvas);\n        }, 300000);\n    }\n}\nfunction $c1ce9d969bfa6909$var$updateTimes() {\n    // Get current local time\n    const now = new Date();\n    // Display local time\n    document.getElementById('local-time').textContent = $c1ce9d969bfa6909$var$formatTime(now);\n    // Calculate and display India time (IST is UTC+5:30)\n    const indiaTime = $c1ce9d969bfa6909$var$getIndiaTime(now);\n    document.getElementById('india-time').textContent = $c1ce9d969bfa6909$var$formatTime(indiaTime, true);\n    // Check if India is working\n    const isWorking = $c1ce9d969bfa6909$var$isIndiaWorking(indiaTime);\n    // Update status display\n    $c1ce9d969bfa6909$var$updateStatus(isWorking, now, indiaTime);\n}\nfunction $c1ce9d969bfa6909$var$getIndiaTime(localTime) {\n    // Create a new date object with the current time\n    const indiaTime = new Date(localTime);\n    // Get the local time zone offset in minutes and convert to milliseconds\n    const localOffset = localTime.getTimezoneOffset() * 60000;\n    // IST is UTC+5:30 (330 minutes ahead of UTC)\n    const istOffset = 19800000;\n    // Adjust the time to IST\n    indiaTime.setTime(indiaTime.getTime() + localOffset + istOffset);\n    return indiaTime;\n}\nfunction $c1ce9d969bfa6909$var$isIndiaWorking(indiaTime) {\n    const day = indiaTime.getDay();\n    const hours = indiaTime.getHours();\n    const minutes = indiaTime.getMinutes();\n    // Convert time to decimal hours for easier comparison\n    const timeInDecimal = hours + minutes / 60;\n    // Check if it's a weekday (Monday to Friday)\n    const isWeekday = day >= 1 && day <= 5;\n    // Check if it's between 9:00 AM and 6:00 PM IST\n    const isDuringWorkHours = timeInDecimal >= 9 && timeInDecimal < 18;\n    // Check if it's a public holiday\n    const isHoliday = $c1ce9d969bfa6909$var$isIndianHoliday(indiaTime);\n    return isWeekday && isDuringWorkHours && !isHoliday;\n}\nfunction $c1ce9d969bfa6909$var$isIndianHoliday(date) {\n    // Get date components\n    const day = date.getDate();\n    const month = date.getMonth() + 1; // JavaScript months are 0-indexed\n    const year = date.getFullYear();\n    // Set of major Indian national holidays (fixed dates)\n    // Format: \"MM-DD\"\n    const fixedHolidays = {\n        \"01-26\": \"Republic Day\",\n        \"08-15\": \"Independence Day\",\n        \"10-02\": \"Gandhi Jayanti\",\n        \"12-25\": \"Christmas\"\n    };\n    // Check if today is a fixed holiday\n    const dateKey = `${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n    if (fixedHolidays[dateKey]) return true;\n    // Variable holidays by year\n    // These change each year based on lunar calendar, religious observations, etc.\n    const variableHolidays = {\n        // 2023 holidays\n        \"2023\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-08\": \"Holi\",\n            \"04-07\": \"Good Friday\",\n            \"04-22\": \"Eid ul-Fitr\",\n            \"06-29\": \"Eid al-Adha\",\n            \"08-30\": \"Raksha Bandhan\",\n            \"09-07\": \"Janmashtami\",\n            \"10-24\": \"Dussehra\",\n            \"11-12\": \"Diwali\",\n            \"11-27\": \"Guru Nanak Jayanti\"\n        },\n        // 2024 holidays\n        \"2024\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-15\": \"Makar Sankranti\",\n            \"03-25\": \"Holi\",\n            \"03-29\": \"Good Friday\",\n            \"04-11\": \"Eid ul-Fitr\",\n            \"06-17\": \"Eid al-Adha\",\n            \"08-19\": \"Raksha Bandhan\",\n            \"08-26\": \"Janmashtami\",\n            \"10-12\": \"Dussehra\",\n            \"11-01\": \"Diwali\",\n            \"11-15\": \"Guru Nanak Jayanti\"\n        },\n        // 2025 holidays\n        \"2025\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-14\": \"Holi\",\n            \"04-18\": \"Good Friday\",\n            \"04-01\": \"Eid ul-Fitr\",\n            \"06-07\": \"Eid al-Adha\",\n            \"08-09\": \"Raksha Bandhan\",\n            \"08-15\": \"Janmashtami\",\n            \"10-02\": \"Dussehra\",\n            \"10-21\": \"Diwali\",\n            \"11-05\": \"Guru Nanak Jayanti\"\n        },\n        // 2026 holidays (projected dates)\n        \"2026\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-04\": \"Holi\",\n            \"04-03\": \"Good Friday\",\n            \"03-22\": \"Eid ul-Fitr\",\n            \"05-29\": \"Eid al-Adha\",\n            \"07-29\": \"Raksha Bandhan\",\n            \"08-05\": \"Janmashtami\",\n            \"09-21\": \"Dussehra\",\n            \"10-10\": \"Diwali\",\n            \"10-24\": \"Guru Nanak Jayanti\"\n        },\n        // 2027 holidays (projected dates)\n        \"2027\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-24\": \"Holi\",\n            \"03-26\": \"Good Friday\",\n            \"03-12\": \"Eid ul-Fitr\",\n            \"05-19\": \"Eid al-Adha\",\n            \"08-17\": \"Raksha Bandhan\",\n            \"08-25\": \"Janmashtami\",\n            \"10-10\": \"Dussehra\",\n            \"10-29\": \"Diwali\",\n            \"11-13\": \"Guru Nanak Jayanti\"\n        },\n        // 2028 holidays (projected dates)\n        \"2028\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-12\": \"Holi\",\n            \"04-14\": \"Good Friday\",\n            \"02-29\": \"Eid ul-Fitr\",\n            \"05-07\": \"Eid al-Adha\",\n            \"08-06\": \"Raksha Bandhan\",\n            \"08-13\": \"Janmashtami\",\n            \"09-28\": \"Dussehra\",\n            \"10-17\": \"Diwali\",\n            \"11-02\": \"Guru Nanak Jayanti\"\n        },\n        // 2029 holidays (projected dates)\n        \"2029\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-02\": \"Holi\",\n            \"03-30\": \"Good Friday\",\n            \"02-18\": \"Eid ul-Fitr\",\n            \"04-27\": \"Eid al-Adha\",\n            \"07-26\": \"Raksha Bandhan\",\n            \"08-02\": \"Janmashtami\",\n            \"09-18\": \"Dussehra\",\n            \"10-06\": \"Diwali\",\n            \"10-22\": \"Guru Nanak Jayanti\"\n        },\n        // 2030 holidays (projected dates)\n        \"2030\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-21\": \"Holi\",\n            \"04-19\": \"Good Friday\",\n            \"02-07\": \"Eid ul-Fitr\",\n            \"04-16\": \"Eid al-Adha\",\n            \"08-15\": \"Raksha Bandhan\",\n            \"08-22\": \"Janmashtami\",\n            \"10-08\": \"Dussehra\",\n            \"10-26\": \"Diwali\",\n            \"11-10\": \"Guru Nanak Jayanti\"\n        }\n    };\n    // Check if today is a variable holiday for the current year\n    if (variableHolidays[year] && variableHolidays[year][dateKey]) return true;\n    // Not a holiday\n    return false;\n}\nfunction $c1ce9d969bfa6909$var$updateStatus(isWorking, localTime, indiaTime) {\n    const statusElement = document.getElementById('status');\n    const statusContainer = document.getElementById('status-container');\n    const timeUntilElement = document.getElementById('time-until');\n    // Check if today is a holiday\n    const holidayName = $c1ce9d969bfa6909$var$getHolidayName(indiaTime);\n    if (isWorking) {\n        statusElement.textContent = 'YES, INDIA IS WORKING RIGHT NOW';\n        statusContainer.className = 'status-container working';\n        // Calculate time until India stops working\n        const timeUntil = $c1ce9d969bfa6909$var$getTimeUntilStatusChange(indiaTime, true);\n        const stopWorkingLocalTime = new Date(localTime.getTime() + timeUntil.milliseconds);\n        timeUntilElement.innerHTML = `India will stop working in <strong>${timeUntil.hours === 0 ? '' : timeUntil.hours + ' hour' + (timeUntil.hours !== 1 ? 's' : '') + ' and '}${timeUntil.minutes} minute${timeUntil.minutes !== 1 ? 's' : ''}</strong>.<br>\n        That's at <strong>${$c1ce9d969bfa6909$var$formatTime(stopWorkingLocalTime)}</strong> your local time.`;\n    } else {\n        statusElement.textContent = 'NO, INDIA IS NOT WORKING RIGHT NOW';\n        statusContainer.className = 'status-container not-working';\n        // Add holiday information if applicable\n        if (holidayName && $c1ce9d969bfa6909$var$isWeekday(indiaTime) && $c1ce9d969bfa6909$var$isDuringWorkHours(indiaTime)) statusElement.textContent += ` (${holidayName})`;\n        // Calculate time until India starts working\n        const timeUntil = $c1ce9d969bfa6909$var$getTimeUntilStatusChange(indiaTime, false);\n        const startWorkingLocalTime = new Date(localTime.getTime() + timeUntil.milliseconds);\n        timeUntilElement.innerHTML = `India will start working in <strong>${timeUntil.hours === 0 ? '' : timeUntil.hours + ' hour' + (timeUntil.hours !== 1 ? 's' : '') + ' and '}${timeUntil.minutes} minute${timeUntil.minutes !== 1 ? 's' : ''}</strong>.<br>\n        That's at <strong>${$c1ce9d969bfa6909$var$formatTime(startWorkingLocalTime)}</strong> your local time.`;\n    }\n}\nfunction $c1ce9d969bfa6909$var$getHolidayName(date) {\n    // Get date components\n    const day = date.getDate();\n    const month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    const dateKey = `${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n    // Fixed holidays\n    const fixedHolidays = {\n        \"01-26\": \"Republic Day\",\n        \"08-15\": \"Independence Day\",\n        \"10-02\": \"Gandhi Jayanti\",\n        \"12-25\": \"Christmas\"\n    };\n    if (fixedHolidays[dateKey]) return fixedHolidays[dateKey];\n    // Variable holidays by year\n    const variableHolidays = {\n        // 2023 holidays\n        \"2023\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-08\": \"Holi\",\n            \"04-07\": \"Good Friday\",\n            \"04-22\": \"Eid ul-Fitr\",\n            \"06-29\": \"Eid al-Adha\",\n            \"08-30\": \"Raksha Bandhan\",\n            \"09-07\": \"Janmashtami\",\n            \"10-24\": \"Dussehra\",\n            \"11-12\": \"Diwali\",\n            \"11-27\": \"Guru Nanak Jayanti\"\n        },\n        // 2024 holidays\n        \"2024\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-15\": \"Makar Sankranti\",\n            \"03-25\": \"Holi\",\n            \"03-29\": \"Good Friday\",\n            \"04-11\": \"Eid ul-Fitr\",\n            \"06-17\": \"Eid al-Adha\",\n            \"08-19\": \"Raksha Bandhan\",\n            \"08-26\": \"Janmashtami\",\n            \"10-12\": \"Dussehra\",\n            \"11-01\": \"Diwali\",\n            \"11-15\": \"Guru Nanak Jayanti\"\n        },\n        // 2025 holidays\n        \"2025\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-14\": \"Holi\",\n            \"04-18\": \"Good Friday\",\n            \"04-01\": \"Eid ul-Fitr\",\n            \"06-07\": \"Eid al-Adha\",\n            \"08-09\": \"Raksha Bandhan\",\n            \"08-15\": \"Janmashtami\",\n            \"10-02\": \"Dussehra\",\n            \"10-21\": \"Diwali\",\n            \"11-05\": \"Guru Nanak Jayanti\"\n        },\n        // 2026 holidays (projected dates)\n        \"2026\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-04\": \"Holi\",\n            \"04-03\": \"Good Friday\",\n            \"03-22\": \"Eid ul-Fitr\",\n            \"05-29\": \"Eid al-Adha\",\n            \"07-29\": \"Raksha Bandhan\",\n            \"08-05\": \"Janmashtami\",\n            \"09-21\": \"Dussehra\",\n            \"10-10\": \"Diwali\",\n            \"10-24\": \"Guru Nanak Jayanti\"\n        },\n        // 2027 holidays (projected dates)\n        \"2027\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-24\": \"Holi\",\n            \"03-26\": \"Good Friday\",\n            \"03-12\": \"Eid ul-Fitr\",\n            \"05-19\": \"Eid al-Adha\",\n            \"08-17\": \"Raksha Bandhan\",\n            \"08-25\": \"Janmashtami\",\n            \"10-10\": \"Dussehra\",\n            \"10-29\": \"Diwali\",\n            \"11-13\": \"Guru Nanak Jayanti\"\n        },\n        // 2028 holidays (projected dates)\n        \"2028\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-12\": \"Holi\",\n            \"04-14\": \"Good Friday\",\n            \"02-29\": \"Eid ul-Fitr\",\n            \"05-07\": \"Eid al-Adha\",\n            \"08-06\": \"Raksha Bandhan\",\n            \"08-13\": \"Janmashtami\",\n            \"09-28\": \"Dussehra\",\n            \"10-17\": \"Diwali\",\n            \"11-02\": \"Guru Nanak Jayanti\"\n        },\n        // 2029 holidays (projected dates)\n        \"2029\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-02\": \"Holi\",\n            \"03-30\": \"Good Friday\",\n            \"02-18\": \"Eid ul-Fitr\",\n            \"04-27\": \"Eid al-Adha\",\n            \"07-26\": \"Raksha Bandhan\",\n            \"08-02\": \"Janmashtami\",\n            \"09-18\": \"Dussehra\",\n            \"10-06\": \"Diwali\",\n            \"10-22\": \"Guru Nanak Jayanti\"\n        },\n        // 2030 holidays (projected dates)\n        \"2030\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-21\": \"Holi\",\n            \"04-19\": \"Good Friday\",\n            \"02-07\": \"Eid ul-Fitr\",\n            \"04-16\": \"Eid al-Adha\",\n            \"08-15\": \"Raksha Bandhan\",\n            \"08-22\": \"Janmashtami\",\n            \"10-08\": \"Dussehra\",\n            \"10-26\": \"Diwali\",\n            \"11-10\": \"Guru Nanak Jayanti\"\n        }\n    };\n    if (variableHolidays[year] && variableHolidays[year][dateKey]) return variableHolidays[year][dateKey];\n    return null;\n}\nfunction $c1ce9d969bfa6909$var$isWeekday(date) {\n    const day = date.getDay();\n    return day >= 1 && day <= 5;\n}\nfunction $c1ce9d969bfa6909$var$isDuringWorkHours(date) {\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const timeInDecimal = hours + minutes / 60;\n    return timeInDecimal >= 9 && timeInDecimal < 18;\n}\nfunction $c1ce9d969bfa6909$var$getTimeUntilStatusChange(indiaTime, isCurrentlyWorking) {\n    const day = indiaTime.getDay();\n    const currentHours = indiaTime.getHours();\n    const currentMinutes = indiaTime.getMinutes();\n    let millisUntilChange = 0;\n    if (isCurrentlyWorking) // Calculate time until 6:00 PM today (end of workday)\n    millisUntilChange = ((18 - currentHours - 1) * 60 + (60 - currentMinutes)) * 60000;\n    else {\n        // If it's after work hours on a weekday\n        if (day >= 1 && day <= 5 && currentHours >= 18) // Time until 9:00 AM next day\n        millisUntilChange = ((24 - currentHours + 9 - 1) * 60 + (60 - currentMinutes)) * 60000;\n        else if (day >= 1 && day <= 5 && currentHours < 9) // Time until 9:00 AM today\n        millisUntilChange = ((9 - currentHours - 1) * 60 + (60 - currentMinutes)) * 60000;\n        else {\n            // Calculate days until Monday\n            let daysUntilMonday = day === 0 ? 1 : 8 - day;\n            // Time until 9:00 AM on Monday\n            millisUntilChange = daysUntilMonday * 86400000 - (currentHours * 60 + currentMinutes) * 60000 + 32400000;\n        }\n    }\n    // Convert milliseconds to hours and minutes\n    const totalMinutes = Math.floor(millisUntilChange / 60000);\n    const hours = Math.floor(totalMinutes / 60);\n    const minutes = totalMinutes % 60;\n    return {\n        hours: hours,\n        minutes: minutes,\n        milliseconds: millisUntilChange\n    };\n}\nfunction $c1ce9d969bfa6909$var$formatTime(date, isIndiaTime = false) {\n    // Different formatting for local time vs. India time\n    if (isIndiaTime) {\n        // For India time, explicitly mention IST\n        const timeStr = new Intl.DateTimeFormat('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: false,\n            weekday: 'short',\n            month: 'short',\n            day: 'numeric'\n        }).format(date);\n        // Also get 12hr format\n        const ampmStr = new Intl.DateTimeFormat('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: true\n        }).format(date);\n        // Extract just the AM/PM part\n        const ampm = ampmStr.slice(-2);\n        return `${timeStr} (${ampm}) IST`;\n    } else {\n        // For local time, use the browser's timezone\n        const timeStr = new Intl.DateTimeFormat('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: false,\n            weekday: 'short',\n            month: 'short',\n            day: 'numeric',\n            timeZoneName: 'short'\n        }).format(date);\n        // Also get 12hr format\n        const ampmStr = new Intl.DateTimeFormat('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: true\n        }).format(date);\n        // Extract just the AM/PM part\n        const ampm = ampmStr.slice(-2);\n        return `${timeStr} (${ampm})`;\n    }\n}\n\n\n//# sourceMappingURL=index.2f579072.js.map\n","import { renderLLMLoadGraph } from './load-graph.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Update times every second\n    updateTimes();\n    setInterval(updateTimes, 1000);\n    \n    // Initialize the LLM load graph\n    initializeLLMLoadGraph();\n});\n\nfunction initializeLLMLoadGraph() {\n    const canvas = document.getElementById('llm-load-graph');\n    if (canvas) {\n        // Initialize graph\n        renderLLMLoadGraph(canvas);\n        \n        // Update graph every 5 minutes to reflect changing time\n        setInterval(() => {\n            renderLLMLoadGraph(canvas);\n        }, 5 * 60 * 1000);\n    }\n}\n\nfunction updateTimes() {\n    // Get current local time\n    const now = new Date();\n    \n    // Display local time\n    document.getElementById('local-time').textContent = formatTime(now);\n    \n    // Calculate and display India time (IST is UTC+5:30)\n    const indiaTime = getIndiaTime(now);\n    document.getElementById('india-time').textContent = formatTime(indiaTime, true);\n    \n    // Check if India is working\n    const isWorking = isIndiaWorking(indiaTime);\n    \n    // Update status display\n    updateStatus(isWorking, now, indiaTime);\n}\n\nfunction getIndiaTime(localTime) {\n    // Create a new date object with the current time\n    const indiaTime = new Date(localTime);\n    \n    // Get the local time zone offset in minutes and convert to milliseconds\n    const localOffset = localTime.getTimezoneOffset() * 60000;\n    \n    // IST is UTC+5:30 (330 minutes ahead of UTC)\n    const istOffset = 330 * 60000;\n    \n    // Adjust the time to IST\n    indiaTime.setTime(indiaTime.getTime() + localOffset + istOffset);\n    \n    return indiaTime;\n}\n\nfunction isIndiaWorking(indiaTime) {\n    const day = indiaTime.getDay();\n    const hours = indiaTime.getHours();\n    const minutes = indiaTime.getMinutes();\n    \n    // Convert time to decimal hours for easier comparison\n    const timeInDecimal = hours + (minutes / 60);\n    \n    // Check if it's a weekday (Monday to Friday)\n    const isWeekday = day >= 1 && day <= 5;\n    \n    // Check if it's between 9:00 AM and 6:00 PM IST\n    const isDuringWorkHours = timeInDecimal >= 9 && timeInDecimal < 18;\n    \n    // Check if it's a public holiday\n    const isHoliday = isIndianHoliday(indiaTime);\n    \n    return isWeekday && isDuringWorkHours && !isHoliday;\n}\n\nfunction isIndianHoliday(date) {\n    // Get date components\n    const day = date.getDate();\n    const month = date.getMonth() + 1; // JavaScript months are 0-indexed\n    const year = date.getFullYear();\n    \n    // Set of major Indian national holidays (fixed dates)\n    // Format: \"MM-DD\"\n    const fixedHolidays = {\n        \"01-26\": \"Republic Day\",        // January 26\n        \"08-15\": \"Independence Day\",    // August 15\n        \"10-02\": \"Gandhi Jayanti\",      // October 2\n        \"12-25\": \"Christmas\",           // December 25\n    };\n    \n    // Check if today is a fixed holiday\n    const dateKey = `${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n    if (fixedHolidays[dateKey]) {\n        return true;\n    }\n    \n    // Variable holidays by year\n    // These change each year based on lunar calendar, religious observations, etc.\n    const variableHolidays = {\n        // 2023 holidays\n        \"2023\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-08\": \"Holi\",\n            \"04-07\": \"Good Friday\",\n            \"04-22\": \"Eid ul-Fitr\",\n            \"06-29\": \"Eid al-Adha\",\n            \"08-30\": \"Raksha Bandhan\",\n            \"09-07\": \"Janmashtami\",\n            \"10-24\": \"Dussehra\",\n            \"11-12\": \"Diwali\",\n            \"11-27\": \"Guru Nanak Jayanti\"\n        },\n        // 2024 holidays\n        \"2024\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-15\": \"Makar Sankranti\",\n            \"03-25\": \"Holi\",\n            \"03-29\": \"Good Friday\",\n            \"04-11\": \"Eid ul-Fitr\",\n            \"06-17\": \"Eid al-Adha\",\n            \"08-19\": \"Raksha Bandhan\",\n            \"08-26\": \"Janmashtami\",\n            \"10-12\": \"Dussehra\",\n            \"11-01\": \"Diwali\",\n            \"11-15\": \"Guru Nanak Jayanti\"\n        },\n        // 2025 holidays\n        \"2025\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-14\": \"Holi\",\n            \"04-18\": \"Good Friday\",\n            \"04-01\": \"Eid ul-Fitr\",\n            \"06-07\": \"Eid al-Adha\",\n            \"08-09\": \"Raksha Bandhan\",\n            \"08-15\": \"Janmashtami\",\n            \"10-02\": \"Dussehra\",\n            \"10-21\": \"Diwali\",\n            \"11-05\": \"Guru Nanak Jayanti\"\n        },\n        // 2026 holidays (projected dates)\n        \"2026\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-04\": \"Holi\",\n            \"04-03\": \"Good Friday\",\n            \"03-22\": \"Eid ul-Fitr\",\n            \"05-29\": \"Eid al-Adha\",\n            \"07-29\": \"Raksha Bandhan\",\n            \"08-05\": \"Janmashtami\",\n            \"09-21\": \"Dussehra\",\n            \"10-10\": \"Diwali\",\n            \"10-24\": \"Guru Nanak Jayanti\"\n        },\n        // 2027 holidays (projected dates)\n        \"2027\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-24\": \"Holi\",\n            \"03-26\": \"Good Friday\",\n            \"03-12\": \"Eid ul-Fitr\",\n            \"05-19\": \"Eid al-Adha\",\n            \"08-17\": \"Raksha Bandhan\",\n            \"08-25\": \"Janmashtami\",\n            \"10-10\": \"Dussehra\",\n            \"10-29\": \"Diwali\",\n            \"11-13\": \"Guru Nanak Jayanti\"\n        },\n        // 2028 holidays (projected dates)\n        \"2028\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-12\": \"Holi\",\n            \"04-14\": \"Good Friday\",\n            \"02-29\": \"Eid ul-Fitr\",\n            \"05-07\": \"Eid al-Adha\",\n            \"08-06\": \"Raksha Bandhan\",\n            \"08-13\": \"Janmashtami\",\n            \"09-28\": \"Dussehra\",\n            \"10-17\": \"Diwali\",\n            \"11-02\": \"Guru Nanak Jayanti\"\n        },\n        // 2029 holidays (projected dates)\n        \"2029\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-02\": \"Holi\",\n            \"03-30\": \"Good Friday\",\n            \"02-18\": \"Eid ul-Fitr\",\n            \"04-27\": \"Eid al-Adha\",\n            \"07-26\": \"Raksha Bandhan\",\n            \"08-02\": \"Janmashtami\",\n            \"09-18\": \"Dussehra\",\n            \"10-06\": \"Diwali\",\n            \"10-22\": \"Guru Nanak Jayanti\"\n        },\n        // 2030 holidays (projected dates)\n        \"2030\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-21\": \"Holi\",\n            \"04-19\": \"Good Friday\",\n            \"02-07\": \"Eid ul-Fitr\",\n            \"04-16\": \"Eid al-Adha\",\n            \"08-15\": \"Raksha Bandhan\",\n            \"08-22\": \"Janmashtami\",\n            \"10-08\": \"Dussehra\",\n            \"10-26\": \"Diwali\",\n            \"11-10\": \"Guru Nanak Jayanti\"\n        }\n    };\n    \n    // Check if today is a variable holiday for the current year\n    if (variableHolidays[year] && variableHolidays[year][dateKey]) {\n        return true;\n    }\n    \n    // Not a holiday\n    return false;\n}\n\nfunction updateStatus(isWorking, localTime, indiaTime) {\n    const statusElement = document.getElementById('status');\n    const statusContainer = document.getElementById('status-container');\n    const timeUntilElement = document.getElementById('time-until');\n    \n    // Check if today is a holiday\n    const holidayName = getHolidayName(indiaTime);\n    \n    if (isWorking) {\n        statusElement.textContent = 'YES, INDIA IS WORKING RIGHT NOW';\n        statusContainer.className = 'status-container working';\n        \n        // Calculate time until India stops working\n        const timeUntil = getTimeUntilStatusChange(indiaTime, true);\n        const stopWorkingLocalTime = new Date(localTime.getTime() + timeUntil.milliseconds);\n        \n        timeUntilElement.innerHTML = `India will stop working in <strong>${\n            timeUntil.hours === 0 ? '' : timeUntil.hours + ' hour' + (timeUntil.hours !== 1 ? 's' : '') + ' and '\n        }${timeUntil.minutes} minute${timeUntil.minutes !== 1 ? 's' : ''}</strong>.<br>\n        That's at <strong>${formatTime(stopWorkingLocalTime)}</strong> your local time.`;\n    } else {\n        statusElement.textContent = 'NO, INDIA IS NOT WORKING RIGHT NOW';\n        statusContainer.className = 'status-container not-working';\n        \n        // Add holiday information if applicable\n        if (holidayName && isWeekday(indiaTime) && isDuringWorkHours(indiaTime)) {\n            statusElement.textContent += ` (${holidayName})`;\n        }\n        \n        // Calculate time until India starts working\n        const timeUntil = getTimeUntilStatusChange(indiaTime, false);\n        const startWorkingLocalTime = new Date(localTime.getTime() + timeUntil.milliseconds);\n        \n        timeUntilElement.innerHTML = `India will start working in <strong>${\n            timeUntil.hours === 0 ? '' : timeUntil.hours + ' hour' + (timeUntil.hours !== 1 ? 's' : '') + ' and '\n        }${timeUntil.minutes} minute${timeUntil.minutes !== 1 ? 's' : ''}</strong>.<br>\n        That's at <strong>${formatTime(startWorkingLocalTime)}</strong> your local time.`;\n    }\n}\n\nfunction getHolidayName(date) {\n    // Get date components\n    const day = date.getDate();\n    const month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    const dateKey = `${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n    \n    // Fixed holidays\n    const fixedHolidays = {\n        \"01-26\": \"Republic Day\",\n        \"08-15\": \"Independence Day\",\n        \"10-02\": \"Gandhi Jayanti\",\n        \"12-25\": \"Christmas\",\n    };\n    \n    if (fixedHolidays[dateKey]) {\n        return fixedHolidays[dateKey];\n    }\n    \n    // Variable holidays by year\n    const variableHolidays = {\n        // 2023 holidays\n        \"2023\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-08\": \"Holi\",\n            \"04-07\": \"Good Friday\",\n            \"04-22\": \"Eid ul-Fitr\",\n            \"06-29\": \"Eid al-Adha\",\n            \"08-30\": \"Raksha Bandhan\",\n            \"09-07\": \"Janmashtami\",\n            \"10-24\": \"Dussehra\",\n            \"11-12\": \"Diwali\",\n            \"11-27\": \"Guru Nanak Jayanti\"\n        },\n        // 2024 holidays\n        \"2024\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-15\": \"Makar Sankranti\",\n            \"03-25\": \"Holi\",\n            \"03-29\": \"Good Friday\",\n            \"04-11\": \"Eid ul-Fitr\",\n            \"06-17\": \"Eid al-Adha\",\n            \"08-19\": \"Raksha Bandhan\",\n            \"08-26\": \"Janmashtami\",\n            \"10-12\": \"Dussehra\",\n            \"11-01\": \"Diwali\",\n            \"11-15\": \"Guru Nanak Jayanti\"\n        },\n        // 2025 holidays\n        \"2025\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-14\": \"Holi\",\n            \"04-18\": \"Good Friday\",\n            \"04-01\": \"Eid ul-Fitr\",\n            \"06-07\": \"Eid al-Adha\",\n            \"08-09\": \"Raksha Bandhan\",\n            \"08-15\": \"Janmashtami\",\n            \"10-02\": \"Dussehra\",\n            \"10-21\": \"Diwali\",\n            \"11-05\": \"Guru Nanak Jayanti\"\n        },\n        // 2026 holidays (projected dates)\n        \"2026\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-04\": \"Holi\",\n            \"04-03\": \"Good Friday\",\n            \"03-22\": \"Eid ul-Fitr\",\n            \"05-29\": \"Eid al-Adha\",\n            \"07-29\": \"Raksha Bandhan\",\n            \"08-05\": \"Janmashtami\",\n            \"09-21\": \"Dussehra\",\n            \"10-10\": \"Diwali\",\n            \"10-24\": \"Guru Nanak Jayanti\"\n        },\n        // 2027 holidays (projected dates)\n        \"2027\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-24\": \"Holi\",\n            \"03-26\": \"Good Friday\",\n            \"03-12\": \"Eid ul-Fitr\",\n            \"05-19\": \"Eid al-Adha\",\n            \"08-17\": \"Raksha Bandhan\",\n            \"08-25\": \"Janmashtami\",\n            \"10-10\": \"Dussehra\",\n            \"10-29\": \"Diwali\",\n            \"11-13\": \"Guru Nanak Jayanti\"\n        },\n        // 2028 holidays (projected dates)\n        \"2028\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-12\": \"Holi\",\n            \"04-14\": \"Good Friday\",\n            \"02-29\": \"Eid ul-Fitr\",\n            \"05-07\": \"Eid al-Adha\",\n            \"08-06\": \"Raksha Bandhan\",\n            \"08-13\": \"Janmashtami\",\n            \"09-28\": \"Dussehra\",\n            \"10-17\": \"Diwali\",\n            \"11-02\": \"Guru Nanak Jayanti\"\n        },\n        // 2029 holidays (projected dates)\n        \"2029\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-02\": \"Holi\",\n            \"03-30\": \"Good Friday\",\n            \"02-18\": \"Eid ul-Fitr\",\n            \"04-27\": \"Eid al-Adha\",\n            \"07-26\": \"Raksha Bandhan\",\n            \"08-02\": \"Janmashtami\",\n            \"09-18\": \"Dussehra\",\n            \"10-06\": \"Diwali\",\n            \"10-22\": \"Guru Nanak Jayanti\"\n        },\n        // 2030 holidays (projected dates)\n        \"2030\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-21\": \"Holi\",\n            \"04-19\": \"Good Friday\",\n            \"02-07\": \"Eid ul-Fitr\",\n            \"04-16\": \"Eid al-Adha\",\n            \"08-15\": \"Raksha Bandhan\",\n            \"08-22\": \"Janmashtami\",\n            \"10-08\": \"Dussehra\",\n            \"10-26\": \"Diwali\",\n            \"11-10\": \"Guru Nanak Jayanti\"\n        }\n    };\n    \n    if (variableHolidays[year] && variableHolidays[year][dateKey]) {\n        return variableHolidays[year][dateKey];\n    }\n    \n    return null;\n}\n\nfunction isWeekday(date) {\n    const day = date.getDay();\n    return day >= 1 && day <= 5;\n}\n\nfunction isDuringWorkHours(date) {\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const timeInDecimal = hours + (minutes / 60);\n    return timeInDecimal >= 9 && timeInDecimal < 18;\n}\n\nfunction getTimeUntilStatusChange(indiaTime, isCurrentlyWorking) {\n    const day = indiaTime.getDay();\n    const currentHours = indiaTime.getHours();\n    const currentMinutes = indiaTime.getMinutes();\n    \n    let millisUntilChange = 0;\n    \n    if (isCurrentlyWorking) {\n        // Calculate time until 6:00 PM today (end of workday)\n        millisUntilChange = ((18 - currentHours - 1) * 60 + (60 - currentMinutes)) * 60 * 1000;\n    } else {\n        // If it's after work hours on a weekday\n        if (day >= 1 && day <= 5 && currentHours >= 18) {\n            // Time until 9:00 AM next day\n            millisUntilChange = ((24 - currentHours + 9 - 1) * 60 + (60 - currentMinutes)) * 60 * 1000;\n        } \n        // If it's before work hours on a weekday\n        else if (day >= 1 && day <= 5 && currentHours < 9) {\n            // Time until 9:00 AM today\n            millisUntilChange = ((9 - currentHours - 1) * 60 + (60 - currentMinutes)) * 60 * 1000;\n        }\n        // If it's weekend (Saturday or Sunday)\n        else {\n            // Calculate days until Monday\n            let daysUntilMonday = (day === 0) ? 1 : (8 - day);\n            \n            // Time until 9:00 AM on Monday\n            millisUntilChange = (daysUntilMonday * 24 * 60 * 60 * 1000) - \n                               ((currentHours * 60 + currentMinutes) * 60 * 1000) + \n                               (9 * 60 * 60 * 1000);\n        }\n    }\n    \n    // Convert milliseconds to hours and minutes\n    const totalMinutes = Math.floor(millisUntilChange / (60 * 1000));\n    const hours = Math.floor(totalMinutes / 60);\n    const minutes = totalMinutes % 60;\n    \n    return {\n        hours,\n        minutes,\n        milliseconds: millisUntilChange\n    };\n}\n\nfunction formatTime(date, isIndiaTime = false) {\n    // Different formatting for local time vs. India time\n    if (isIndiaTime) {\n        // For India time, explicitly mention IST\n        const timeStr = new Intl.DateTimeFormat('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: false,\n            weekday: 'short',\n            month: 'short',\n            day: 'numeric'\n        }).format(date);\n        \n        // Also get 12hr format\n        const ampmStr = new Intl.DateTimeFormat('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: true\n        }).format(date);\n        \n        // Extract just the AM/PM part\n        const ampm = ampmStr.slice(-2);\n        \n        return `${timeStr} (${ampm}) IST`;\n    } else {\n        // For local time, use the browser's timezone\n        const timeStr = new Intl.DateTimeFormat('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: false,\n            weekday: 'short',\n            month: 'short',\n            day: 'numeric',\n            timeZoneName: 'short'\n        }).format(date);\n        \n        // Also get 12hr format\n        const ampmStr = new Intl.DateTimeFormat('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: true\n        }).format(date);\n        \n        // Extract just the AM/PM part\n        const ampm = ampmStr.slice(-2);\n        \n        return `${timeStr} (${ampm})`;\n    }\n} ","// llmLoadGraph.js\n// Render an LLM provider load graph into a provided canvas context, using user-local time and day\n\nexport function renderLLMLoadGraph(canvas, options = {}) {\n  const ctx = canvas.getContext(\"2d\");\n  const width = canvas.width;\n  const height = canvas.height;\n\n  const now = new Date();\n  const currentHour = now.getHours();\n  const isWeekend = now.getDay() === 0 || now.getDay() === 6;\n\n  // Update the day type text\n  const dayTypeElement = document.getElementById('day-type');\n  if (dayTypeElement) {\n    dayTypeElement.textContent = `(${isWeekend ? 'weekend' : 'weekday'})`;\n  }\n\n  const providers = [\n    {\n      name: \"ChatGPT\",\n      color: \"#ff6384\",\n      weekdayPeaks: [11, 17, 0],\n      weekendPeaks: [13, 18],\n      weekendScale: 0.7  // Weekend peaks are 70% of weekday peaks\n    },\n    {\n      name: \"Claude\",\n      color: \"#36a2eb\",\n      weekdayPeaks: [16, 20, 1],\n      weekendPeaks: [17, 21],\n      weekendScale: 0.65  // Weekend peaks are 65% of weekday peaks\n    },\n    {\n      name: \"Grok\",\n      color: \"#cc65fe\",\n      weekdayPeaks: [0, 18],\n      weekendPeaks: [1, 19],\n      weekendScale: 0.75  // Weekend peaks are 75% of weekday peaks\n    },\n    {\n      name: \"Bing AI\",\n      color: \"#ffce56\",\n      weekdayPeaks: [11, 17],\n      weekendPeaks: [12, 18],\n      weekendScale: 0.7  // Weekend peaks are 70% of weekday peaks\n    },\n  ];\n\n  function generateCurve(peaks, weekendScale = 1) {\n    // Generate points at 5-minute intervals (193 points for 24 hours)\n    const numPoints = 193; // 24 hours * 12 points per hour + 1 for wrapping\n    const points = new Array(numPoints).fill(0);\n    \n    for (const peak of peaks) {\n      for (let i = 0; i < numPoints; i++) {\n        const hour = (i / 12); // Convert point index to hour\n        const dist = Math.min(\n          Math.abs(hour - peak),\n          Math.abs(hour - peak + 24),\n          Math.abs(hour - peak - 24)\n        );\n        // Tighter Gaussian falloff to maintain distinct peaks\n        const gaussian = Math.exp(-0.5 * (dist / 2.2) ** 2);\n        points[i] += gaussian;\n      }\n    }\n    \n    // Normalize the values and apply weekend scaling if needed\n    const max = Math.max(...points);\n    return points.map(v => (v / max) * weekendScale);\n  }\n\n  const curves = providers.map(p => {\n    const peaks = isWeekend ? p.weekendPeaks : p.weekdayPeaks;\n    const scale = isWeekend ? p.weekendScale : 1;\n    return generateCurve(peaks, scale);\n  });\n\n  // Clear canvas\n  ctx.clearRect(0, 0, width, height);\n\n  // Background\n  ctx.fillStyle = \"#f9f9f9\";\n  ctx.fillRect(0, 0, width, height);\n  \n  // Draw grid\n  ctx.strokeStyle = \"#e0e0e0\";\n  ctx.lineWidth = 1;\n  \n  // Vertical grid lines (hours)\n  ctx.beginPath();\n  for (let i = 0; i <= 24; i += 2) {\n    const x = (i / 24) * width;\n    ctx.moveTo(x, 0);\n    ctx.lineTo(x, height);\n  }\n  \n  // Horizontal grid lines\n  ctx.beginPath();\n  for (let i = 0; i <= 4; i++) {\n    const y = (i / 4) * height;\n    ctx.moveTo(0, y);\n    ctx.lineTo(width, y);\n  }\n  ctx.stroke();\n\n  // Draw x-axis labels (hours)\n  ctx.fillStyle = \"#666\";\n  ctx.font = \"12px sans-serif\";\n  ctx.textAlign = \"center\";\n  for (let i = 0; i <= 24; i += 4) {\n    const x = (i / 24) * width;\n    ctx.fillText(`${i}:00`, x, height - 5);\n  }\n\n  // Helper function to get point coordinates\n  function getPoint(i, value) {\n    return {\n      x: (i / 192) * width,\n      y: height - value * height * 0.8 - 20\n    };\n  }\n\n  // Helper function to calculate slope between two points\n  function getSlope(p1, p2) {\n    return Math.abs((p2.y - p1.y) / (p2.x - p1.x));\n  }\n\n  // Helper function to get control points with dynamic tension\n  function getControlPoints(p0, p1, p2, p3) {\n    // Calculate slopes\n    const slope1 = getSlope(p0, p2);\n    const slope2 = getSlope(p1, p3);\n    \n    // Adjust tension based on slope (more responsive to local changes)\n    const baseTension = 0.25;\n    const tension1 = baseTension / (1 + slope1 * 0.3);\n    const tension2 = baseTension / (1 + slope2 * 0.3);\n    \n    const dx1 = p2.x - p0.x;\n    const dx2 = p3.x - p1.x;\n    \n    // Calculate control points with refined tension adjustment\n    return {\n      cp1: {\n        x: p1.x + dx1 * tension1,\n        y: p1.y + (p2.y - p0.y) * tension1 * 0.4\n      },\n      cp2: {\n        x: p2.x - dx2 * tension2,\n        y: p2.y - (p3.y - p1.y) * tension2 * 0.4\n      }\n    };\n  }\n\n  // Draw curves with better styling\n  providers.forEach((provider, index) => {\n    const curve = curves[index];\n    \n    // Draw filled area under curve\n    ctx.fillStyle = `${provider.color}33`; // Add transparency\n    ctx.beginPath();\n    \n    // Start at the bottom left\n    ctx.moveTo(0, height - 20);\n    \n    // Draw the curve\n    for (let i = 0; i < curve.length; i++) {\n      const p1 = getPoint(i, curve[i]);\n      \n      if (i === 0) {\n        ctx.lineTo(p1.x, p1.y);\n      } else {\n        const p0 = getPoint(Math.max(0, i - 2), curve[Math.max(0, i - 2)]);\n        const prevP = getPoint(i - 1, curve[i - 1]);\n        const nextP = getPoint(Math.min(curve.length - 1, i + 1), curve[Math.min(curve.length - 1, i + 1)]);\n        \n        const { cp1, cp2 } = getControlPoints(p0, prevP, p1, nextP);\n        ctx.bezierCurveTo(cp1.x, cp1.y, cp2.x, cp2.y, p1.x, p1.y);\n      }\n    }\n    \n    // Complete the filled area\n    ctx.lineTo(width, height - 20);\n    ctx.closePath();\n    ctx.fill();\n    \n    // Draw curve line\n    ctx.strokeStyle = provider.color;\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    \n    // Draw the curve\n    for (let i = 0; i < curve.length; i++) {\n      const p1 = getPoint(i, curve[i]);\n      \n      if (i === 0) {\n        ctx.moveTo(p1.x, p1.y);\n      } else {\n        const p0 = getPoint(Math.max(0, i - 2), curve[Math.max(0, i - 2)]);\n        const prevP = getPoint(i - 1, curve[i - 1]);\n        const nextP = getPoint(Math.min(curve.length - 1, i + 1), curve[Math.min(curve.length - 1, i + 1)]);\n        \n        const { cp1, cp2 } = getControlPoints(p0, prevP, p1, nextP);\n        ctx.bezierCurveTo(cp1.x, cp1.y, cp2.x, cp2.y, p1.x, p1.y);\n      }\n    }\n    ctx.stroke();\n  });\n\n  // Draw weekday peak reference line if it's a weekend\n  if (isWeekend) {\n    ctx.strokeStyle = \"#666\";\n    ctx.lineWidth = 1;\n    ctx.setLineDash([5, 3]);\n    ctx.beginPath();\n    \n    // Draw at the weekday peak level (where value would be 1.0)\n    const peakY = height - 1.0 * height * 0.8 - 20;\n    ctx.moveTo(0, peakY);\n    ctx.lineTo(width, peakY);\n    ctx.stroke();\n    \n    // Add label\n    ctx.fillStyle = \"#666\";\n    ctx.font = \"12px sans-serif\";\n    ctx.textAlign = \"right\";\n    ctx.fillText(\"Weekday Peak\", width - 10, peakY - 5);\n    \n    // Reset dash pattern\n    ctx.setLineDash([]);\n  }\n\n  // Draw current time indicator\n  const nowX = (currentHour + now.getMinutes() / 60) / 24 * width;\n  ctx.strokeStyle = \"#000\";\n  ctx.lineWidth = 2;\n  ctx.beginPath();\n  ctx.setLineDash([5, 3]);\n  ctx.moveTo(nowX, 0);\n  ctx.lineTo(nowX, height - 20);\n  ctx.stroke();\n  ctx.setLineDash([]);\n\n  // Draw current time label\n  ctx.fillStyle = \"#000\";\n  ctx.font = \"bold 12px sans-serif\";\n  ctx.textAlign = \"center\";\n  ctx.fillText(\"Now\", nowX, 15);\n\n  // Draw legend\n  const legendX = 15;\n  let legendY = 25;\n  ctx.textAlign = \"left\";\n  providers.forEach((p, i) => {\n    ctx.fillStyle = p.color;\n    ctx.fillRect(legendX, legendY - 8, 15, 8);\n    ctx.fillStyle = \"#555\";\n    ctx.font = \"12px sans-serif\";\n    ctx.fillText(p.name, legendX + 20, legendY);\n    legendY += 20;\n  });\n}\n\n// Usage:\n// const canvas = document.getElementById(\"yourCanvasId\");\n// import { renderLLMLoadGraph } from \"./llmLoadGraph.js\";\n// renderLLMLoadGraph(canvas);\n"],"names":["$9be5ae1e49dd79b2$export$1b372903cd355918","canvas","options","ctx","getContext","width","height","now","Date","currentHour","getHours","isWeekend","getDay","dayTypeElement","document","getElementById","textContent","providers","name","color","weekdayPeaks","weekendPeaks","weekendScale","curves","map","p","generateCurve","peaks","points","Array","fill","peak","i","hour","gaussian","Math","exp","dist","min","abs","max","v","clearRect","fillStyle","fillRect","strokeStyle","lineWidth","beginPath","x","moveTo","lineTo","y","stroke","font","textAlign","fillText","getPoint","value","getSlope","p1","p2","getControlPoints","p0","p3","slope1","slope2","tension1","baseTension","tension2","dx1","dx2","cp1","cp2","forEach","provider","index","curve","length","bezierCurveTo","closePath","setLineDash","peakY","nowX","getMinutes","legendY","legendX","$c1ce9d969bfa6909$var$updateTimes","$c1ce9d969bfa6909$var$formatTime","indiaTime","$c1ce9d969bfa6909$var$getIndiaTime","localTime","localOffset","getTimezoneOffset","setTime","getTime","$c1ce9d969bfa6909$var$updateStatus","isWorking","statusElement","statusContainer","timeUntilElement","holidayName","$c1ce9d969bfa6909$var$getHolidayName","date","day","getDate","month","getMonth","year","getFullYear","dateKey","toString","padStart","fixedHolidays","variableHolidays","className","timeUntil","$c1ce9d969bfa6909$var$getTimeUntilStatusChange","stopWorkingLocalTime","milliseconds","innerHTML","hours","minutes","$c1ce9d969bfa6909$var$isWeekday","$c1ce9d969bfa6909$var$isDuringWorkHours","timeInDecimal","startWorkingLocalTime","$c1ce9d969bfa6909$var$isIndiaWorking","isHoliday","$c1ce9d969bfa6909$var$isIndianHoliday","isWeekday","isCurrentlyWorking","currentHours","currentMinutes","millisUntilChange","totalMinutes","floor","daysUntilMonday","isIndiaTime","timeStr","Intl","DateTimeFormat","minute","second","hour12","weekday","format","ampm","ampmStr","slice","timeZoneName","addEventListener","setInterval","$c1ce9d969bfa6909$var$initializeLLMLoadGraph"],"version":3,"file":"index.2f579072.js.map"}