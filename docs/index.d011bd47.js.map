{"mappings":"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","sources":["<anon>","script.js"],"sourcesContent":["var $c1ce9d969bfa6909$exports = {};\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    // Update times every second\n    $c1ce9d969bfa6909$var$updateTimes();\n    setInterval($c1ce9d969bfa6909$var$updateTimes, 1000);\n});\nfunction $c1ce9d969bfa6909$var$updateTimes() {\n    // Get current local time\n    const now = new Date();\n    // Display local time\n    document.getElementById('local-time').textContent = $c1ce9d969bfa6909$var$formatTime(now);\n    // Calculate and display India time (IST is UTC+5:30)\n    const indiaTime = $c1ce9d969bfa6909$var$getIndiaTime(now);\n    document.getElementById('india-time').textContent = $c1ce9d969bfa6909$var$formatTime(indiaTime, true);\n    // Check if India is working\n    const isWorking = $c1ce9d969bfa6909$var$isIndiaWorking(indiaTime);\n    // Update status display\n    $c1ce9d969bfa6909$var$updateStatus(isWorking, now, indiaTime);\n}\nfunction $c1ce9d969bfa6909$var$getIndiaTime(localTime) {\n    // Create a new date object with the current time\n    const indiaTime = new Date(localTime);\n    // Get the local time zone offset in minutes and convert to milliseconds\n    const localOffset = localTime.getTimezoneOffset() * 60000;\n    // IST is UTC+5:30 (330 minutes ahead of UTC)\n    const istOffset = 19800000;\n    // Adjust the time to IST\n    indiaTime.setTime(indiaTime.getTime() + localOffset + istOffset);\n    return indiaTime;\n}\nfunction $c1ce9d969bfa6909$var$isIndiaWorking(indiaTime) {\n    const day = indiaTime.getDay();\n    const hours = indiaTime.getHours();\n    const minutes = indiaTime.getMinutes();\n    // Convert time to decimal hours for easier comparison\n    const timeInDecimal = hours + minutes / 60;\n    // Check if it's a weekday (Monday to Friday)\n    const isWeekday = day >= 1 && day <= 5;\n    // Check if it's between 9:00 AM and 6:00 PM IST\n    const isDuringWorkHours = timeInDecimal >= 9 && timeInDecimal < 18;\n    // Check if it's a public holiday\n    const isHoliday = $c1ce9d969bfa6909$var$isIndianHoliday(indiaTime);\n    return isWeekday && isDuringWorkHours && !isHoliday;\n}\nfunction $c1ce9d969bfa6909$var$isIndianHoliday(date) {\n    // Get date components\n    const day = date.getDate();\n    const month = date.getMonth() + 1; // JavaScript months are 0-indexed\n    const year = date.getFullYear();\n    // Set of major Indian national holidays (fixed dates)\n    // Format: \"MM-DD\"\n    const fixedHolidays = {\n        \"01-26\": \"Republic Day\",\n        \"08-15\": \"Independence Day\",\n        \"10-02\": \"Gandhi Jayanti\",\n        \"12-25\": \"Christmas\"\n    };\n    // Check if today is a fixed holiday\n    const dateKey = `${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n    if (fixedHolidays[dateKey]) return true;\n    // Variable holidays by year\n    // These change each year based on lunar calendar, religious observations, etc.\n    const variableHolidays = {\n        // 2023 holidays\n        \"2023\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-08\": \"Holi\",\n            \"04-07\": \"Good Friday\",\n            \"04-22\": \"Eid ul-Fitr\",\n            \"06-29\": \"Eid al-Adha\",\n            \"08-30\": \"Raksha Bandhan\",\n            \"09-07\": \"Janmashtami\",\n            \"10-24\": \"Dussehra\",\n            \"11-12\": \"Diwali\",\n            \"11-27\": \"Guru Nanak Jayanti\"\n        },\n        // 2024 holidays\n        \"2024\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-15\": \"Makar Sankranti\",\n            \"03-25\": \"Holi\",\n            \"03-29\": \"Good Friday\",\n            \"04-11\": \"Eid ul-Fitr\",\n            \"06-17\": \"Eid al-Adha\",\n            \"08-19\": \"Raksha Bandhan\",\n            \"08-26\": \"Janmashtami\",\n            \"10-12\": \"Dussehra\",\n            \"11-01\": \"Diwali\",\n            \"11-15\": \"Guru Nanak Jayanti\"\n        },\n        // 2025 holidays\n        \"2025\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-14\": \"Holi\",\n            \"04-18\": \"Good Friday\",\n            \"04-01\": \"Eid ul-Fitr\",\n            \"06-07\": \"Eid al-Adha\",\n            \"08-09\": \"Raksha Bandhan\",\n            \"08-15\": \"Janmashtami\",\n            \"10-02\": \"Dussehra\",\n            \"10-21\": \"Diwali\",\n            \"11-05\": \"Guru Nanak Jayanti\"\n        },\n        // 2026 holidays (projected dates)\n        \"2026\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-04\": \"Holi\",\n            \"04-03\": \"Good Friday\",\n            \"03-22\": \"Eid ul-Fitr\",\n            \"05-29\": \"Eid al-Adha\",\n            \"07-29\": \"Raksha Bandhan\",\n            \"08-05\": \"Janmashtami\",\n            \"09-21\": \"Dussehra\",\n            \"10-10\": \"Diwali\",\n            \"10-24\": \"Guru Nanak Jayanti\"\n        },\n        // 2027 holidays (projected dates)\n        \"2027\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-24\": \"Holi\",\n            \"03-26\": \"Good Friday\",\n            \"03-12\": \"Eid ul-Fitr\",\n            \"05-19\": \"Eid al-Adha\",\n            \"08-17\": \"Raksha Bandhan\",\n            \"08-25\": \"Janmashtami\",\n            \"10-10\": \"Dussehra\",\n            \"10-29\": \"Diwali\",\n            \"11-13\": \"Guru Nanak Jayanti\"\n        },\n        // 2028 holidays (projected dates)\n        \"2028\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-12\": \"Holi\",\n            \"04-14\": \"Good Friday\",\n            \"02-29\": \"Eid ul-Fitr\",\n            \"05-07\": \"Eid al-Adha\",\n            \"08-06\": \"Raksha Bandhan\",\n            \"08-13\": \"Janmashtami\",\n            \"09-28\": \"Dussehra\",\n            \"10-17\": \"Diwali\",\n            \"11-02\": \"Guru Nanak Jayanti\"\n        },\n        // 2029 holidays (projected dates)\n        \"2029\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-02\": \"Holi\",\n            \"03-30\": \"Good Friday\",\n            \"02-18\": \"Eid ul-Fitr\",\n            \"04-27\": \"Eid al-Adha\",\n            \"07-26\": \"Raksha Bandhan\",\n            \"08-02\": \"Janmashtami\",\n            \"09-18\": \"Dussehra\",\n            \"10-06\": \"Diwali\",\n            \"10-22\": \"Guru Nanak Jayanti\"\n        },\n        // 2030 holidays (projected dates)\n        \"2030\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-21\": \"Holi\",\n            \"04-19\": \"Good Friday\",\n            \"02-07\": \"Eid ul-Fitr\",\n            \"04-16\": \"Eid al-Adha\",\n            \"08-15\": \"Raksha Bandhan\",\n            \"08-22\": \"Janmashtami\",\n            \"10-08\": \"Dussehra\",\n            \"10-26\": \"Diwali\",\n            \"11-10\": \"Guru Nanak Jayanti\"\n        }\n    };\n    // Check if today is a variable holiday for the current year\n    if (variableHolidays[year] && variableHolidays[year][dateKey]) return true;\n    // Not a holiday\n    return false;\n}\nfunction $c1ce9d969bfa6909$var$updateStatus(isWorking, localTime, indiaTime) {\n    const statusElement = document.getElementById('status');\n    const statusContainer = document.getElementById('status-container');\n    const timeUntilElement = document.getElementById('time-until');\n    // Check if today is a holiday\n    const holidayName = $c1ce9d969bfa6909$var$getHolidayName(indiaTime);\n    if (isWorking) {\n        statusElement.textContent = 'YES, INDIA IS WORKING RIGHT NOW';\n        statusContainer.className = 'status-container working';\n        // Calculate time until India stops working\n        const timeUntil = $c1ce9d969bfa6909$var$getTimeUntilStatusChange(indiaTime, true);\n        const stopWorkingLocalTime = new Date(localTime.getTime() + timeUntil.milliseconds);\n        timeUntilElement.innerHTML = `India will stop working in <strong>${timeUntil.hours === 0 ? '' : timeUntil.hours + ' hour' + (timeUntil.hours !== 1 ? 's' : '') + ' and '}${timeUntil.minutes} minute${timeUntil.minutes !== 1 ? 's' : ''}</strong>.<br>\n        That's at <strong>${$c1ce9d969bfa6909$var$formatTime(stopWorkingLocalTime)}</strong> your local time.`;\n    } else {\n        statusElement.textContent = 'NO, INDIA IS NOT WORKING RIGHT NOW';\n        statusContainer.className = 'status-container not-working';\n        // Add holiday information if applicable\n        if (holidayName && $c1ce9d969bfa6909$var$isWeekday(indiaTime) && $c1ce9d969bfa6909$var$isDuringWorkHours(indiaTime)) statusElement.textContent += ` (${holidayName})`;\n        // Calculate time until India starts working\n        const timeUntil = $c1ce9d969bfa6909$var$getTimeUntilStatusChange(indiaTime, false);\n        const startWorkingLocalTime = new Date(localTime.getTime() + timeUntil.milliseconds);\n        timeUntilElement.innerHTML = `India will start working in <strong>${timeUntil.hours === 0 ? '' : timeUntil.hours + ' hour' + (timeUntil.hours !== 1 ? 's' : '') + ' and '}${timeUntil.minutes} minute${timeUntil.minutes !== 1 ? 's' : ''}</strong>.<br>\n        That's at <strong>${$c1ce9d969bfa6909$var$formatTime(startWorkingLocalTime)}</strong> your local time.`;\n    }\n}\nfunction $c1ce9d969bfa6909$var$getHolidayName(date) {\n    // Get date components\n    const day = date.getDate();\n    const month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    const dateKey = `${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n    // Fixed holidays\n    const fixedHolidays = {\n        \"01-26\": \"Republic Day\",\n        \"08-15\": \"Independence Day\",\n        \"10-02\": \"Gandhi Jayanti\",\n        \"12-25\": \"Christmas\"\n    };\n    if (fixedHolidays[dateKey]) return fixedHolidays[dateKey];\n    // Variable holidays by year\n    const variableHolidays = {\n        // 2023 holidays\n        \"2023\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-08\": \"Holi\",\n            \"04-07\": \"Good Friday\",\n            \"04-22\": \"Eid ul-Fitr\",\n            \"06-29\": \"Eid al-Adha\",\n            \"08-30\": \"Raksha Bandhan\",\n            \"09-07\": \"Janmashtami\",\n            \"10-24\": \"Dussehra\",\n            \"11-12\": \"Diwali\",\n            \"11-27\": \"Guru Nanak Jayanti\"\n        },\n        // 2024 holidays\n        \"2024\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-15\": \"Makar Sankranti\",\n            \"03-25\": \"Holi\",\n            \"03-29\": \"Good Friday\",\n            \"04-11\": \"Eid ul-Fitr\",\n            \"06-17\": \"Eid al-Adha\",\n            \"08-19\": \"Raksha Bandhan\",\n            \"08-26\": \"Janmashtami\",\n            \"10-12\": \"Dussehra\",\n            \"11-01\": \"Diwali\",\n            \"11-15\": \"Guru Nanak Jayanti\"\n        },\n        // 2025 holidays\n        \"2025\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-14\": \"Holi\",\n            \"04-18\": \"Good Friday\",\n            \"04-01\": \"Eid ul-Fitr\",\n            \"06-07\": \"Eid al-Adha\",\n            \"08-09\": \"Raksha Bandhan\",\n            \"08-15\": \"Janmashtami\",\n            \"10-02\": \"Dussehra\",\n            \"10-21\": \"Diwali\",\n            \"11-05\": \"Guru Nanak Jayanti\"\n        },\n        // 2026 holidays (projected dates)\n        \"2026\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-04\": \"Holi\",\n            \"04-03\": \"Good Friday\",\n            \"03-22\": \"Eid ul-Fitr\",\n            \"05-29\": \"Eid al-Adha\",\n            \"07-29\": \"Raksha Bandhan\",\n            \"08-05\": \"Janmashtami\",\n            \"09-21\": \"Dussehra\",\n            \"10-10\": \"Diwali\",\n            \"10-24\": \"Guru Nanak Jayanti\"\n        },\n        // 2027 holidays (projected dates)\n        \"2027\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-24\": \"Holi\",\n            \"03-26\": \"Good Friday\",\n            \"03-12\": \"Eid ul-Fitr\",\n            \"05-19\": \"Eid al-Adha\",\n            \"08-17\": \"Raksha Bandhan\",\n            \"08-25\": \"Janmashtami\",\n            \"10-10\": \"Dussehra\",\n            \"10-29\": \"Diwali\",\n            \"11-13\": \"Guru Nanak Jayanti\"\n        },\n        // 2028 holidays (projected dates)\n        \"2028\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-12\": \"Holi\",\n            \"04-14\": \"Good Friday\",\n            \"02-29\": \"Eid ul-Fitr\",\n            \"05-07\": \"Eid al-Adha\",\n            \"08-06\": \"Raksha Bandhan\",\n            \"08-13\": \"Janmashtami\",\n            \"09-28\": \"Dussehra\",\n            \"10-17\": \"Diwali\",\n            \"11-02\": \"Guru Nanak Jayanti\"\n        },\n        // 2029 holidays (projected dates)\n        \"2029\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-02\": \"Holi\",\n            \"03-30\": \"Good Friday\",\n            \"02-18\": \"Eid ul-Fitr\",\n            \"04-27\": \"Eid al-Adha\",\n            \"07-26\": \"Raksha Bandhan\",\n            \"08-02\": \"Janmashtami\",\n            \"09-18\": \"Dussehra\",\n            \"10-06\": \"Diwali\",\n            \"10-22\": \"Guru Nanak Jayanti\"\n        },\n        // 2030 holidays (projected dates)\n        \"2030\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-21\": \"Holi\",\n            \"04-19\": \"Good Friday\",\n            \"02-07\": \"Eid ul-Fitr\",\n            \"04-16\": \"Eid al-Adha\",\n            \"08-15\": \"Raksha Bandhan\",\n            \"08-22\": \"Janmashtami\",\n            \"10-08\": \"Dussehra\",\n            \"10-26\": \"Diwali\",\n            \"11-10\": \"Guru Nanak Jayanti\"\n        }\n    };\n    if (variableHolidays[year] && variableHolidays[year][dateKey]) return variableHolidays[year][dateKey];\n    return null;\n}\nfunction $c1ce9d969bfa6909$var$isWeekday(date) {\n    const day = date.getDay();\n    return day >= 1 && day <= 5;\n}\nfunction $c1ce9d969bfa6909$var$isDuringWorkHours(date) {\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const timeInDecimal = hours + minutes / 60;\n    return timeInDecimal >= 9 && timeInDecimal < 18;\n}\nfunction $c1ce9d969bfa6909$var$getTimeUntilStatusChange(indiaTime, isCurrentlyWorking) {\n    const day = indiaTime.getDay();\n    const currentHours = indiaTime.getHours();\n    const currentMinutes = indiaTime.getMinutes();\n    let millisUntilChange = 0;\n    if (isCurrentlyWorking) // Calculate time until 6:00 PM today (end of workday)\n    millisUntilChange = ((18 - currentHours - 1) * 60 + (60 - currentMinutes)) * 60000;\n    else {\n        // If it's after work hours on a weekday\n        if (day >= 1 && day <= 5 && currentHours >= 18) // Time until 9:00 AM next day\n        millisUntilChange = ((24 - currentHours + 9 - 1) * 60 + (60 - currentMinutes)) * 60000;\n        else if (day >= 1 && day <= 5 && currentHours < 9) // Time until 9:00 AM today\n        millisUntilChange = ((9 - currentHours - 1) * 60 + (60 - currentMinutes)) * 60000;\n        else {\n            // Calculate days until Monday\n            let daysUntilMonday = day === 0 ? 1 : 8 - day;\n            // Time until 9:00 AM on Monday\n            millisUntilChange = daysUntilMonday * 86400000 - (currentHours * 60 + currentMinutes) * 60000 + 32400000;\n        }\n    }\n    // Convert milliseconds to hours and minutes\n    const totalMinutes = Math.floor(millisUntilChange / 60000);\n    const hours = Math.floor(totalMinutes / 60);\n    const minutes = totalMinutes % 60;\n    return {\n        hours: hours,\n        minutes: minutes,\n        milliseconds: millisUntilChange\n    };\n}\nfunction $c1ce9d969bfa6909$var$formatTime(date, isIndiaTime = false) {\n    // Different formatting for local time vs. India time\n    if (isIndiaTime) {\n        // For India time, explicitly mention IST\n        const timeStr = new Intl.DateTimeFormat('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: false,\n            weekday: 'short',\n            month: 'short',\n            day: 'numeric'\n        }).format(date);\n        // Also get 12hr format\n        const ampmStr = new Intl.DateTimeFormat('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: true\n        }).format(date);\n        // Extract just the AM/PM part\n        const ampm = ampmStr.slice(-2);\n        return `${timeStr} (${ampm}) IST`;\n    } else {\n        // For local time, use the browser's timezone\n        const timeStr = new Intl.DateTimeFormat('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: false,\n            weekday: 'short',\n            month: 'short',\n            day: 'numeric',\n            timeZoneName: 'short'\n        }).format(date);\n        // Also get 12hr format\n        const ampmStr = new Intl.DateTimeFormat('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: true\n        }).format(date);\n        // Extract just the AM/PM part\n        const ampm = ampmStr.slice(-2);\n        return `${timeStr} (${ampm})`;\n    }\n}\n\n\n//# sourceMappingURL=index.d011bd47.js.map\n","document.addEventListener('DOMContentLoaded', () => {\n    // Update times every second\n    updateTimes();\n    setInterval(updateTimes, 1000);\n});\n\nfunction updateTimes() {\n    // Get current local time\n    const now = new Date();\n    \n    // Display local time\n    document.getElementById('local-time').textContent = formatTime(now);\n    \n    // Calculate and display India time (IST is UTC+5:30)\n    const indiaTime = getIndiaTime(now);\n    document.getElementById('india-time').textContent = formatTime(indiaTime, true);\n    \n    // Check if India is working\n    const isWorking = isIndiaWorking(indiaTime);\n    \n    // Update status display\n    updateStatus(isWorking, now, indiaTime);\n}\n\nfunction getIndiaTime(localTime) {\n    // Create a new date object with the current time\n    const indiaTime = new Date(localTime);\n    \n    // Get the local time zone offset in minutes and convert to milliseconds\n    const localOffset = localTime.getTimezoneOffset() * 60000;\n    \n    // IST is UTC+5:30 (330 minutes ahead of UTC)\n    const istOffset = 330 * 60000;\n    \n    // Adjust the time to IST\n    indiaTime.setTime(indiaTime.getTime() + localOffset + istOffset);\n    \n    return indiaTime;\n}\n\nfunction isIndiaWorking(indiaTime) {\n    const day = indiaTime.getDay();\n    const hours = indiaTime.getHours();\n    const minutes = indiaTime.getMinutes();\n    \n    // Convert time to decimal hours for easier comparison\n    const timeInDecimal = hours + (minutes / 60);\n    \n    // Check if it's a weekday (Monday to Friday)\n    const isWeekday = day >= 1 && day <= 5;\n    \n    // Check if it's between 9:00 AM and 6:00 PM IST\n    const isDuringWorkHours = timeInDecimal >= 9 && timeInDecimal < 18;\n    \n    // Check if it's a public holiday\n    const isHoliday = isIndianHoliday(indiaTime);\n    \n    return isWeekday && isDuringWorkHours && !isHoliday;\n}\n\nfunction isIndianHoliday(date) {\n    // Get date components\n    const day = date.getDate();\n    const month = date.getMonth() + 1; // JavaScript months are 0-indexed\n    const year = date.getFullYear();\n    \n    // Set of major Indian national holidays (fixed dates)\n    // Format: \"MM-DD\"\n    const fixedHolidays = {\n        \"01-26\": \"Republic Day\",        // January 26\n        \"08-15\": \"Independence Day\",    // August 15\n        \"10-02\": \"Gandhi Jayanti\",      // October 2\n        \"12-25\": \"Christmas\",           // December 25\n    };\n    \n    // Check if today is a fixed holiday\n    const dateKey = `${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n    if (fixedHolidays[dateKey]) {\n        return true;\n    }\n    \n    // Variable holidays by year\n    // These change each year based on lunar calendar, religious observations, etc.\n    const variableHolidays = {\n        // 2023 holidays\n        \"2023\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-08\": \"Holi\",\n            \"04-07\": \"Good Friday\",\n            \"04-22\": \"Eid ul-Fitr\",\n            \"06-29\": \"Eid al-Adha\",\n            \"08-30\": \"Raksha Bandhan\",\n            \"09-07\": \"Janmashtami\",\n            \"10-24\": \"Dussehra\",\n            \"11-12\": \"Diwali\",\n            \"11-27\": \"Guru Nanak Jayanti\"\n        },\n        // 2024 holidays\n        \"2024\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-15\": \"Makar Sankranti\",\n            \"03-25\": \"Holi\",\n            \"03-29\": \"Good Friday\",\n            \"04-11\": \"Eid ul-Fitr\",\n            \"06-17\": \"Eid al-Adha\",\n            \"08-19\": \"Raksha Bandhan\",\n            \"08-26\": \"Janmashtami\",\n            \"10-12\": \"Dussehra\",\n            \"11-01\": \"Diwali\",\n            \"11-15\": \"Guru Nanak Jayanti\"\n        },\n        // 2025 holidays\n        \"2025\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-14\": \"Holi\",\n            \"04-18\": \"Good Friday\",\n            \"04-01\": \"Eid ul-Fitr\",\n            \"06-07\": \"Eid al-Adha\",\n            \"08-09\": \"Raksha Bandhan\",\n            \"08-15\": \"Janmashtami\",\n            \"10-02\": \"Dussehra\",\n            \"10-21\": \"Diwali\",\n            \"11-05\": \"Guru Nanak Jayanti\"\n        },\n        // 2026 holidays (projected dates)\n        \"2026\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-04\": \"Holi\",\n            \"04-03\": \"Good Friday\",\n            \"03-22\": \"Eid ul-Fitr\",\n            \"05-29\": \"Eid al-Adha\",\n            \"07-29\": \"Raksha Bandhan\",\n            \"08-05\": \"Janmashtami\",\n            \"09-21\": \"Dussehra\",\n            \"10-10\": \"Diwali\",\n            \"10-24\": \"Guru Nanak Jayanti\"\n        },\n        // 2027 holidays (projected dates)\n        \"2027\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-24\": \"Holi\",\n            \"03-26\": \"Good Friday\",\n            \"03-12\": \"Eid ul-Fitr\",\n            \"05-19\": \"Eid al-Adha\",\n            \"08-17\": \"Raksha Bandhan\",\n            \"08-25\": \"Janmashtami\",\n            \"10-10\": \"Dussehra\",\n            \"10-29\": \"Diwali\",\n            \"11-13\": \"Guru Nanak Jayanti\"\n        },\n        // 2028 holidays (projected dates)\n        \"2028\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-12\": \"Holi\",\n            \"04-14\": \"Good Friday\",\n            \"02-29\": \"Eid ul-Fitr\",\n            \"05-07\": \"Eid al-Adha\",\n            \"08-06\": \"Raksha Bandhan\",\n            \"08-13\": \"Janmashtami\",\n            \"09-28\": \"Dussehra\",\n            \"10-17\": \"Diwali\",\n            \"11-02\": \"Guru Nanak Jayanti\"\n        },\n        // 2029 holidays (projected dates)\n        \"2029\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-02\": \"Holi\",\n            \"03-30\": \"Good Friday\",\n            \"02-18\": \"Eid ul-Fitr\",\n            \"04-27\": \"Eid al-Adha\",\n            \"07-26\": \"Raksha Bandhan\",\n            \"08-02\": \"Janmashtami\",\n            \"09-18\": \"Dussehra\",\n            \"10-06\": \"Diwali\",\n            \"10-22\": \"Guru Nanak Jayanti\"\n        },\n        // 2030 holidays (projected dates)\n        \"2030\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-21\": \"Holi\",\n            \"04-19\": \"Good Friday\",\n            \"02-07\": \"Eid ul-Fitr\",\n            \"04-16\": \"Eid al-Adha\",\n            \"08-15\": \"Raksha Bandhan\",\n            \"08-22\": \"Janmashtami\",\n            \"10-08\": \"Dussehra\",\n            \"10-26\": \"Diwali\",\n            \"11-10\": \"Guru Nanak Jayanti\"\n        }\n    };\n    \n    // Check if today is a variable holiday for the current year\n    if (variableHolidays[year] && variableHolidays[year][dateKey]) {\n        return true;\n    }\n    \n    // Not a holiday\n    return false;\n}\n\nfunction updateStatus(isWorking, localTime, indiaTime) {\n    const statusElement = document.getElementById('status');\n    const statusContainer = document.getElementById('status-container');\n    const timeUntilElement = document.getElementById('time-until');\n    \n    // Check if today is a holiday\n    const holidayName = getHolidayName(indiaTime);\n    \n    if (isWorking) {\n        statusElement.textContent = 'YES, INDIA IS WORKING RIGHT NOW';\n        statusContainer.className = 'status-container working';\n        \n        // Calculate time until India stops working\n        const timeUntil = getTimeUntilStatusChange(indiaTime, true);\n        const stopWorkingLocalTime = new Date(localTime.getTime() + timeUntil.milliseconds);\n        \n        timeUntilElement.innerHTML = `India will stop working in <strong>${\n            timeUntil.hours === 0 ? '' : timeUntil.hours + ' hour' + (timeUntil.hours !== 1 ? 's' : '') + ' and '\n        }${timeUntil.minutes} minute${timeUntil.minutes !== 1 ? 's' : ''}</strong>.<br>\n        That's at <strong>${formatTime(stopWorkingLocalTime)}</strong> your local time.`;\n    } else {\n        statusElement.textContent = 'NO, INDIA IS NOT WORKING RIGHT NOW';\n        statusContainer.className = 'status-container not-working';\n        \n        // Add holiday information if applicable\n        if (holidayName && isWeekday(indiaTime) && isDuringWorkHours(indiaTime)) {\n            statusElement.textContent += ` (${holidayName})`;\n        }\n        \n        // Calculate time until India starts working\n        const timeUntil = getTimeUntilStatusChange(indiaTime, false);\n        const startWorkingLocalTime = new Date(localTime.getTime() + timeUntil.milliseconds);\n        \n        timeUntilElement.innerHTML = `India will start working in <strong>${\n            timeUntil.hours === 0 ? '' : timeUntil.hours + ' hour' + (timeUntil.hours !== 1 ? 's' : '') + ' and '\n        }${timeUntil.minutes} minute${timeUntil.minutes !== 1 ? 's' : ''}</strong>.<br>\n        That's at <strong>${formatTime(startWorkingLocalTime)}</strong> your local time.`;\n    }\n}\n\nfunction getHolidayName(date) {\n    // Get date components\n    const day = date.getDate();\n    const month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    const dateKey = `${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n    \n    // Fixed holidays\n    const fixedHolidays = {\n        \"01-26\": \"Republic Day\",\n        \"08-15\": \"Independence Day\",\n        \"10-02\": \"Gandhi Jayanti\",\n        \"12-25\": \"Christmas\",\n    };\n    \n    if (fixedHolidays[dateKey]) {\n        return fixedHolidays[dateKey];\n    }\n    \n    // Variable holidays by year\n    const variableHolidays = {\n        // 2023 holidays\n        \"2023\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-08\": \"Holi\",\n            \"04-07\": \"Good Friday\",\n            \"04-22\": \"Eid ul-Fitr\",\n            \"06-29\": \"Eid al-Adha\",\n            \"08-30\": \"Raksha Bandhan\",\n            \"09-07\": \"Janmashtami\",\n            \"10-24\": \"Dussehra\",\n            \"11-12\": \"Diwali\",\n            \"11-27\": \"Guru Nanak Jayanti\"\n        },\n        // 2024 holidays\n        \"2024\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-15\": \"Makar Sankranti\",\n            \"03-25\": \"Holi\",\n            \"03-29\": \"Good Friday\",\n            \"04-11\": \"Eid ul-Fitr\",\n            \"06-17\": \"Eid al-Adha\",\n            \"08-19\": \"Raksha Bandhan\",\n            \"08-26\": \"Janmashtami\",\n            \"10-12\": \"Dussehra\",\n            \"11-01\": \"Diwali\",\n            \"11-15\": \"Guru Nanak Jayanti\"\n        },\n        // 2025 holidays\n        \"2025\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-14\": \"Holi\",\n            \"04-18\": \"Good Friday\",\n            \"04-01\": \"Eid ul-Fitr\",\n            \"06-07\": \"Eid al-Adha\",\n            \"08-09\": \"Raksha Bandhan\",\n            \"08-15\": \"Janmashtami\",\n            \"10-02\": \"Dussehra\",\n            \"10-21\": \"Diwali\",\n            \"11-05\": \"Guru Nanak Jayanti\"\n        },\n        // 2026 holidays (projected dates)\n        \"2026\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-04\": \"Holi\",\n            \"04-03\": \"Good Friday\",\n            \"03-22\": \"Eid ul-Fitr\",\n            \"05-29\": \"Eid al-Adha\",\n            \"07-29\": \"Raksha Bandhan\",\n            \"08-05\": \"Janmashtami\",\n            \"09-21\": \"Dussehra\",\n            \"10-10\": \"Diwali\",\n            \"10-24\": \"Guru Nanak Jayanti\"\n        },\n        // 2027 holidays (projected dates)\n        \"2027\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-24\": \"Holi\",\n            \"03-26\": \"Good Friday\",\n            \"03-12\": \"Eid ul-Fitr\",\n            \"05-19\": \"Eid al-Adha\",\n            \"08-17\": \"Raksha Bandhan\",\n            \"08-25\": \"Janmashtami\",\n            \"10-10\": \"Dussehra\",\n            \"10-29\": \"Diwali\",\n            \"11-13\": \"Guru Nanak Jayanti\"\n        },\n        // 2028 holidays (projected dates)\n        \"2028\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-12\": \"Holi\",\n            \"04-14\": \"Good Friday\",\n            \"02-29\": \"Eid ul-Fitr\",\n            \"05-07\": \"Eid al-Adha\",\n            \"08-06\": \"Raksha Bandhan\",\n            \"08-13\": \"Janmashtami\",\n            \"09-28\": \"Dussehra\",\n            \"10-17\": \"Diwali\",\n            \"11-02\": \"Guru Nanak Jayanti\"\n        },\n        // 2029 holidays (projected dates)\n        \"2029\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-02\": \"Holi\",\n            \"03-30\": \"Good Friday\",\n            \"02-18\": \"Eid ul-Fitr\",\n            \"04-27\": \"Eid al-Adha\",\n            \"07-26\": \"Raksha Bandhan\",\n            \"08-02\": \"Janmashtami\",\n            \"09-18\": \"Dussehra\",\n            \"10-06\": \"Diwali\",\n            \"10-22\": \"Guru Nanak Jayanti\"\n        },\n        // 2030 holidays (projected dates)\n        \"2030\": {\n            \"01-01\": \"New Year's Day\",\n            \"01-14\": \"Makar Sankranti\",\n            \"03-21\": \"Holi\",\n            \"04-19\": \"Good Friday\",\n            \"02-07\": \"Eid ul-Fitr\",\n            \"04-16\": \"Eid al-Adha\",\n            \"08-15\": \"Raksha Bandhan\",\n            \"08-22\": \"Janmashtami\",\n            \"10-08\": \"Dussehra\",\n            \"10-26\": \"Diwali\",\n            \"11-10\": \"Guru Nanak Jayanti\"\n        }\n    };\n    \n    if (variableHolidays[year] && variableHolidays[year][dateKey]) {\n        return variableHolidays[year][dateKey];\n    }\n    \n    return null;\n}\n\nfunction isWeekday(date) {\n    const day = date.getDay();\n    return day >= 1 && day <= 5;\n}\n\nfunction isDuringWorkHours(date) {\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const timeInDecimal = hours + (minutes / 60);\n    return timeInDecimal >= 9 && timeInDecimal < 18;\n}\n\nfunction getTimeUntilStatusChange(indiaTime, isCurrentlyWorking) {\n    const day = indiaTime.getDay();\n    const currentHours = indiaTime.getHours();\n    const currentMinutes = indiaTime.getMinutes();\n    \n    let millisUntilChange = 0;\n    \n    if (isCurrentlyWorking) {\n        // Calculate time until 6:00 PM today (end of workday)\n        millisUntilChange = ((18 - currentHours - 1) * 60 + (60 - currentMinutes)) * 60 * 1000;\n    } else {\n        // If it's after work hours on a weekday\n        if (day >= 1 && day <= 5 && currentHours >= 18) {\n            // Time until 9:00 AM next day\n            millisUntilChange = ((24 - currentHours + 9 - 1) * 60 + (60 - currentMinutes)) * 60 * 1000;\n        } \n        // If it's before work hours on a weekday\n        else if (day >= 1 && day <= 5 && currentHours < 9) {\n            // Time until 9:00 AM today\n            millisUntilChange = ((9 - currentHours - 1) * 60 + (60 - currentMinutes)) * 60 * 1000;\n        }\n        // If it's weekend (Saturday or Sunday)\n        else {\n            // Calculate days until Monday\n            let daysUntilMonday = (day === 0) ? 1 : (8 - day);\n            \n            // Time until 9:00 AM on Monday\n            millisUntilChange = (daysUntilMonday * 24 * 60 * 60 * 1000) - \n                               ((currentHours * 60 + currentMinutes) * 60 * 1000) + \n                               (9 * 60 * 60 * 1000);\n        }\n    }\n    \n    // Convert milliseconds to hours and minutes\n    const totalMinutes = Math.floor(millisUntilChange / (60 * 1000));\n    const hours = Math.floor(totalMinutes / 60);\n    const minutes = totalMinutes % 60;\n    \n    return {\n        hours,\n        minutes,\n        milliseconds: millisUntilChange\n    };\n}\n\nfunction formatTime(date, isIndiaTime = false) {\n    // Different formatting for local time vs. India time\n    if (isIndiaTime) {\n        // For India time, explicitly mention IST\n        const timeStr = new Intl.DateTimeFormat('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: false,\n            weekday: 'short',\n            month: 'short',\n            day: 'numeric'\n        }).format(date);\n        \n        // Also get 12hr format\n        const ampmStr = new Intl.DateTimeFormat('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: true\n        }).format(date);\n        \n        // Extract just the AM/PM part\n        const ampm = ampmStr.slice(-2);\n        \n        return `${timeStr} (${ampm}) IST`;\n    } else {\n        // For local time, use the browser's timezone\n        const timeStr = new Intl.DateTimeFormat('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: false,\n            weekday: 'short',\n            month: 'short',\n            day: 'numeric',\n            timeZoneName: 'short'\n        }).format(date);\n        \n        // Also get 12hr format\n        const ampmStr = new Intl.DateTimeFormat('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: true\n        }).format(date);\n        \n        // Extract just the AM/PM part\n        const ampm = ampmStr.slice(-2);\n        \n        return `${timeStr} (${ampm})`;\n    }\n} "],"names":["$c1ce9d969bfa6909$var$updateTimes","now","Date","document","getElementById","textContent","$c1ce9d969bfa6909$var$formatTime","indiaTime","$c1ce9d969bfa6909$var$getIndiaTime","localTime","localOffset","getTimezoneOffset","setTime","getTime","$c1ce9d969bfa6909$var$updateStatus","isWorking","statusElement","statusContainer","timeUntilElement","holidayName","$c1ce9d969bfa6909$var$getHolidayName","date","day","getDate","month","getMonth","year","getFullYear","dateKey","toString","padStart","fixedHolidays","variableHolidays","className","timeUntil","$c1ce9d969bfa6909$var$getTimeUntilStatusChange","stopWorkingLocalTime","milliseconds","innerHTML","hours","minutes","$c1ce9d969bfa6909$var$isWeekday","getDay","$c1ce9d969bfa6909$var$isDuringWorkHours","timeInDecimal","getHours","getMinutes","startWorkingLocalTime","$c1ce9d969bfa6909$var$isIndiaWorking","isHoliday","$c1ce9d969bfa6909$var$isIndianHoliday","isWeekday","isCurrentlyWorking","currentHours","currentMinutes","millisUntilChange","totalMinutes","Math","floor","daysUntilMonday","isIndiaTime","timeStr","Intl","DateTimeFormat","hour","minute","second","hour12","weekday","format","ampm","ampmStr","slice","timeZoneName","addEventListener","setInterval"],"version":3,"file":"index.d011bd47.js.map"}